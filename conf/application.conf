# This is the main configuration file for the application.
# ~~~~~

# Application name and version
app {
    major    = 0
    minor    = 1
    revision = 0
    version  = ${app.major}.${app.minor}.${app.revision}
    name     = "Lucene Server"
    fullname = ${app.name} ${app.version}
    desc     = "Network Server Interface for Lucene Server - by btnguyen2k"
}

parsers.text.maxLength=128K

# secret key, used to call create/write to indices
index.secret="s3cr3t"

# Server mode:
# - standalone: single standalone server, support all types of directories (fs, redis, cassandra)
server.mode=standalone

# Directory type:
# - fs: indices stored in FSDirectory
# - redis: indices stored in RedisDirectory
# - cassandra: indices stored in CassandraDirectory
directory.type=fs
directory.fs.path=./data

# Configurations for RedisDirectory
#directory.type=redis
#directory.redis.host=localhost
#directory.redis.port=6379
#directory.redis.password=password #optional

# Configurations for CassandraDirectory
#directory.type=cassandra
#directory.cassandra.hostsAndPorts=localhost:9042,host2:9042,host3:9042
#directory.cassandra.keyspace=keyspace
#directory.cassandra.user=username #optional
#directory.cassandra.password=password  #optional

play {
    akka {
        actor {
            default-dispatcher = {
                fork-join-executor {
                    parallelism-factor = 2.0
                    parallelism-max = 32
                }
            }
        }
    }
}

#----------------------------------------------------------------------

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="xw@Ri/TWQ9VbY5xOu2cmNs[UPuaNOJd85bFvx?oDCCnj4x7_sqU4T^T63LoghQgd"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global=globals.Bootstrap

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""
#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
# ebean.default="models.*"

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

